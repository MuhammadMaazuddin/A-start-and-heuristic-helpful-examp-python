#  _              _                                    _ 
# ( )_           ( )_                                /  )
# |  _)  __   ___|  _)    ___   _ _  ___   __    _  (_  |
# | |  / __ \  __) |    / ___)/ _  )  __)/ __ \ (_)   | |
# | |_(  ___/__  \ |_  ( (___( (_| |__  \  ___/  _    | |
#  \__)\____)____/\__)  \____)\__ _)____/\____) (_)   (_)
                                                       
                                                       
from Heuristic_search_22i2139_M2 import astar_search as ACS
grid = [
[['A', -2], ['|', 0], ['|', 0], ['|', 0], ['|', 0], ['|', 0], [' ', -2], ['T', 0]],
[[' ', -3], ['-', -2], ['-', -2], ['A', -2], ['A', -2], [' ', -1], ['A', -4], ['A', -3]],
[['A', -3], ['|', 0], ['-', -3], [' ', -2], ['-', -2], ['A', -2], [' ', -1], ['A', -4]],
[['|', 0], ['A', -3], ['|', 0], ['|', 0], ['A', -4], ['-', -4], ['A', -4], ['|', 0]],
[[' ', -2], ['|', 0], ['|', 0], ['-', -4], ['-', -3], ['A', -2], ['A', -2], ['-', -3]],
[['A', -4], ['A', -2], ['-', -2], ['-', -4], [' ', -3], ['A', -4], ['|', 0], ['A', -2]],
[['|', 0], [' ', -2], ['|', 0], ['|', 0], ['|', 0], ['-', -4], [' ', -1], ['-', -2]],
[['S', 0], [' ', -2], [' ', -3], ['-', -2], [' ', -3], ['A', -4], ['A', -2], ['-', -3]]]

ORG_PATH = [(7, 0), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (5, 4), 
            (5, 5), (4, 5), (4, 6), (3, 6), (2, 6), (1, 6), (1, 7), (0, 7)] 

path , total_cost  = ACS(grid,(7,0),(0,7))
flg = True
for i,node in enumerate(ORG_PATH):
    if path[i][0] == node[0] and path[i][1] == node[1]:
        continue
    else:
        flg = False
        break
if(total_cost == -25 and flg == True):
    with open('ASS/Test_Cases_Label.txt', 'r') as file:
        file_contents = file.readlines()
        for i in range(0,6):
            print(file_contents[i],end='')

#  _              _                                    __   
# ( )_           ( )_                                / __ \ 
# |  _)  __   ___|  _)    ___   _ _  ___   __    _  (_)  ) )
# | |  / __ \  __) |    / ___)/ _  )  __)/ __ \ (_)    /  / 
# | |_(  ___/__  \ |_  ( (___( (_| |__  \  ___/  _   /  /( )
#  \__)\____)____/\__)  \____)\__ _)____/\____) (_) (_____/ 
                                                          
                                                          
grid = [
[[' ', -3], ['-', -4], ['-', -3], ['-', -2], ['T', 0]],
[['-', -4], [' ', -2], ['|', 0], ['|', 0], ['A', -4]],
[['|', 0], ['|', 0], [' ', -1], ['A', -4], ['A', -4]],
[[' ', -3], ['A', -1], ['-', -3], ['|', 0], ['|', 0]],
[['S', 0], ['A', -2], ['|', 0], ['-', -4], ['A', -4]]]

ORG_PATH =  [(4, 0), (4, 1), (3, 1), (2, 1), (2, 2), (2, 3), 
             (2, 4), (1, 4), (0, 4)] 


path , total_cost = ACS(grid,(4,0),(0,4))
flg = True
print(total_cost)

for i,node in enumerate(ORG_PATH):
    if path[i][0] == node[0] and path[i][1] == node[1]:
        continue
    else:
        flg = False
        break

if(total_cost == -16 and flg == True):
    with open('ASS/Test_Cases_Label.txt', 'r') as file:
        file_contents = file.readlines()
        for i in range(6,12):
            print(file_contents[i],end='')
