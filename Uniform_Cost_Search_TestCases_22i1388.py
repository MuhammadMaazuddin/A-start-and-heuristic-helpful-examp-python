#                            _                    _ 
#                           ( )                 /  )
#   ___ ___    __   ___ ___ | |_     __  _ __  (_  |
# /  _   _  \/ __ \  _   _  \  _ \ / __ \  __)   | |
# | ( ) ( ) |  ___/ ( ) ( ) | |_) )  ___/ |      | |
# (_) (_) (_)\____)_) (_) (_)_ __/ \____)_)      (_)
                                                  
                                                  
#  _              _                                    _ 
# ( )_           ( )_                                /  )
# |  _)  __   ___|  _)    ___   _ _  ___   __    _  (_  |
# | |  / __ \  __) |    / ___)/ _  )  __)/ __ \ (_)   | |
# | |_(  ___/__  \ |_  ( (___( (_| |__  \  ___/  _    | |
#  \__)\____)____/\__)  \____)\__ _)____/\____) (_)   (_)
                                                       

from Uniform_Cost_Search_22i1388_M1 import uniform_cost_search as UCS

grid = [[['-', -2], ['A', -4], ['A', -3], ['A', -3], ['|', 0], [' ', -2], [' ', -1], ['T', 0]],
[['-', -3], ['A', -3], ['-', -3], [' ', -1], ['|', 0], [' ', -2], ['|', 0], ['A', -1]],
[[' ', -2], ['|', 0], ['A', -2], ['-', -3], ['|', 0], ['|', 0], ['-', -4], [' ', -3]],
[['A', -2], ['-', -4], ['A', -2], [' ', -2], [' ', -2], ['-', -2], ['A', -2], [' ', -3]],
[[' ', -2], ['|', 0], ['-', -4], ['|', 0], ['|', 0], ['-', -3], ['-', -2], ['-', -3]],
[['|', 0], ['A', -2], ['|', 0], ['|', 0], ['|', 0], ['A', -4], ['-', -4], ['|', 0]],
[['-', -3], [' ', -1], ['A', -1], ['-', -4], ['-', -4], ['A', -4], [' ', -2], ['|', 0]],
[['S', 0], ['|', 0], ['-', -4], ['-', -2], [' ', -2], [' ', -2], ['|', 0], [' ', -3]]]


ORG_PATH = [(7, 0), (7, 1), (6, 1), (5, 1), (4, 1), (4, 0), (3, 0),
            (2, 0), (2, 1), (1, 1), (0, 1), (0, 2), (0, 3), (1, 3),
            (1, 4), (1, 5), (0, 5), (0, 6), (0, 7)]

path , total_cost = UCS(grid,(7,0),(0,7))
flg = True
for i,node in enumerate(ORG_PATH):
    if path[i][0] == node[0] and path[i][1] == node[1]:
        continue
    else:
        flg = False
        break
if(total_cost == -28 and flg == True):
    with open('ASS/Test_Cases_Label.txt', 'r') as file:
        file_contents = file.readlines()
        for i in range(0,6):
            print(file_contents[i],end='')



#  _              _                                    __   
# ( )_           ( )_                                / __ \ 
# |  _)  __   ___|  _)    ___   _ _  ___   __    _  (_)  ) )
# | |  / __ \  __) |    / ___)/ _  )  __)/ __ \ (_)    /  / 
# | |_(  ___/__  \ |_  ( (___( (_| |__  \  ___/  _   /  /( )
#  \__)\____)____/\__)  \____)\__ _)____/\____) (_) (_____/ 
                                                          
                                                          


grid = [[[' ', -3], [' ', -1], ['-', -2], [' ', -1], ['T', 0]],
    [[' ', -1], ['-', -4], ['|', 0], ['-', -3], [' ', -3]],
    [['|', 0], ['A', -2], ['A', -4], ['-', -2], ['|', 0]],
    [['-', -3], ['|', 0], ['-', -4], ['|', 0], [' ', -1]],
    [['S', 0], [' ', -2], ['A', -4], ['A', -4], ['|', 0]]]

ORG_PATH = [(4, 0), (4, 1), (4, 2), (4, 3), (3, 3), (3, 4), (2, 4), (1, 4), (0, 4)]

path , total_cost = UCS(grid,(4,0),(0,4))
flg = True
for i,node in enumerate(ORG_PATH):
    if path[i][0] == node[0] and path[i][1] == node[1]:
        continue
    else:
        flg = False
        break

if(total_cost == -14 and flg == True):
    with open('ASS/Test_Cases_Label.txt', 'r') as file:
        file_contents = file.readlines()
        for i in range(6,12):
            print(file_contents[i],end='')
